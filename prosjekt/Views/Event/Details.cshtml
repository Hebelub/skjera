@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using prosjekt.Data

@model EventModel

@inject ApplicationDbContext DbContext

@inject UserManager<ApplicationUser> UserManager;
@{
    var user = await UserManager.GetUserAsync(User);
    var userOrganizationRelation = user?.GetRelationToOrganizationAsync(Model.OrganizerId).Result ?? new UserOrganization();
    var userAccessRight = User.IsInRole("Admin")
        ? AccessRight.FullAccess
        : userOrganizationRelation.AccessRight;

    var userEventRelation = await Model.GetUserEventRelationAsync(DbContext, user);
    var attendingUsers = Model.GetAttendingUsersAsync(DbContext).Result;
}

<h1>Details</h1>

<partial name="_EventPartial" model="Model" />

<div>
    @if (userAccessRight.CanEditEvents)
    {
        <a asp-controller="Event" asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">Edit</a>
        <span>|</span>
    }
    @if (userAccessRight.CanDeleteEvents)
    {
        <a asp-controller="Event" asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger">Delete</a>
        <span>|</span>
    }
    <a asp-controller="Organization" asp-action="Details" asp-route-id="@Model.OrganizerId" class="btn btn-secondary">Back to Organizer</a>

    @* Start of bad js button code *@
    <script>
        function attend(buttonEl, id) {
            let attending = buttonEl.innerHTML.trim() === "Attending";
            
            if (attending) {
                buttonEl.className = "btn btn-outline-primary";
                buttonEl.innerHTML = "Attend";
            }
            else {
                buttonEl.className = "btn btn-primary";
                buttonEl.innerHTML = "Attending";
            }                
            
            attendEvent(id, !attending);
        }
    </script>

    @if (userEventRelation.IsAttending)
    {
        <button
            class="btn btn-primary"
            onClick="attend(this, @Model.Id)" value="Attending">
            Attending
        </button>
    }
    else
    {
        <button
            class="btn btn-outline-primary"
            onClick="attend(this, @Model.Id)">
            Attend
        </button>
    }
    @* End of bad js button code *@

    <span>Attending: @attendingUsers.Count</span>


    @* There should be horizontal space between here *@
    @* Or the Hide button should be to the right *@
</div>

<br/>
<br/>

@{
    var newCommentTemp = new Comment
    {
        EventModel = Model,
        EventModelId = Model.Id
    };
}

<partial name="_PostComment" model="newCommentTemp"/>

@{
    var comments = await DbContext.Comments
        .Where(c => c.EventModelId == Model.Id)
        .Include(c => c.PostedBy)
        // It should sort by time, but I didn't find out how without buds
        .OrderByDescending(c => c.Id)
        .ToListAsync();
}

@foreach (var comment in comments)
{
    <partial name="_CommentPartial" model="comment"/>
}