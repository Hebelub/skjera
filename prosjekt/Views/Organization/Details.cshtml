@model prosjekt.Models.OrganizationModel

@using prosjekt.Data
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity

@inject ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager;

@{
    var eventsOfOrganization = await DbContext.EventModels
        .Where(e => e.OrganizerId == Model.Id)
        .Include(e => e.Organizer)
        .ToListAsync();

    var user = await UserManager.GetUserAsync(User);
    var userOrganizationRelation = user?.GetRelationToOrganizationAsync(Model.Id).Result ?? new UserOrganization();
    var userAccessRight = User.IsInRole("Admin")
        ? AccessRight.FullAccess
        : userOrganizationRelation.AccessRight;
}


<h1>@Html.DisplayFor(model => model.Name)</h1>

<hr/>
@Html.Raw(Model.Description)
<hr/>

<br/>

<div>
    @if (userAccessRight.CanEditOrganization)
    {
        <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">Edit Organization</a>
    }
    @if (userAccessRight.CanDeleteOrganization)
    {
        <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger">Delete Organization</a>
    }

    @if (userAccessRight.CanManageUsers)
    {
        <a asp-controller="OrganizationRights" asp-action="Index" asp-route-id="@Model.Id" class="btn btn-dark">Users With Rights</a>
    }

    @if (userAccessRight.CanCreateEvents)
    {
        <a asp-controller="Event" asp-action="Create" asp-route-id="@Model.Id" class="btn btn-primary">Create New Event</a>
    }
    
    @if (userAccessRight.HasAnyAccess)
    {
        <br/>
        <br/>
        <hr/>
    }
</div>
<br/>
<h3>Our events</h3>
<div>
    <partial name="_EventList" model="eventsOfOrganization"/>
</div>