@model prosjekt.Models.OrganizationModel

@using prosjekt.Data
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity

@inject ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager;

@{
    var eventsOfOrganization = await DbContext.EventModels
        .Where(e => e.OrganizerId == Model.Id)
        .Include(e => e.Organizer)
        .ToListAsync(); 

    var user = await UserManager.GetUserAsync(User);
    var userOrganizationRelation = user?.GetRelationToOrganizationAsync(Model.Id).Result ?? new UserOrganization();
    var userAccessRight = User.IsInRole("Admin") 
        ? AccessRight.FullAccess 
        : userOrganizationRelation.AccessRight;
}



<h1>Details</h1>

<div>
    <h4>OrganizationModel</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class = "col-sm-10">
            @Html.Raw(Model.Description)
        </dd>
    </dl>
</div>
<div>
    
    @if (userAccessRight.CanEditOrganization)
    {
        <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning" >Edit Organization</a> 
        <span> | </span>
    }
    @if (userAccessRight.CanDeleteOrganization)
    {
        <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger">Delete Organization</a>
        <span> | </span>
    }
    <a asp-action="Index"  class="btn btn-secondary" >Back To Organizations</a>
</div>
<br/>
<h3>Our events</h3>
<div>
    <partial name="_EventList" model="eventsOfOrganization"/>
</div>

@if (userAccessRight.CanCreateEvents)
{
    <a asp-controller="Event"  asp-action="Create" asp-route-id="@Model.Id" class="btn btn-primary" >Create New Event</a>
}
