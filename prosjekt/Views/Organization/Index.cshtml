@inject UserManager<ApplicationUser> UserManager
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model IEnumerable<OrganizationModel>
@{
    var user = await UserManager.GetUserAsync(User);
    var listUserOrganizationRelations = user?.GetOrganizationRelationsAsync().Result ?? new List<UserOrganization>();


    UserOrganization GetUserOrganizationRelation(OrganizationModel organization)
    {
        foreach (var userOrganization in listUserOrganizationRelations)
        {
            if (userOrganization.Organization == organization)
            {
                return userOrganization;
            }
        }
        return new UserOrganization(user, organization);
    }

    List<UserOrganization> userOrganizationRelations = new();
    bool organizationWithAccessExist = false;
    bool organizationYouFollowExist = false;

    foreach (var organization in Model)
    {
        var userOrganizationRelation = GetUserOrganizationRelation(organization);
        userOrganizationRelations.Add(userOrganizationRelation);
        if (userOrganizationRelation.AccessRight.HasAnyAccess)
        {
            organizationWithAccessExist = true;
        }
    }
}

<p>
    <a asp-action="Create">Create New</a>
</p>


@if (organizationWithAccessExist)
{
    <h1>Foreninger du har Admintilgang til</h1>

    @foreach (var relation in userOrganizationRelations)
    {
        if (relation.AccessRight.HasAnyAccess)
        {
            <partial name="_OrganizationPartial" model="relation"/>
        }
    }
}


<h1>Linje/Student-foreninger</h1>
@foreach (var relation in userOrganizationRelations)
{
    if (!relation.AccessRight.HasAnyAccess)
    {
        <partial name="_OrganizationPartial" model="relation"/>
    }
}
